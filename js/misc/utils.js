"use strict";function _createForOfIteratorHelper(t,r){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=_unsupportedIterableToArray(t))||r&&t&&"number"==typeof t.length){e&&(t=e);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,l=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return i=t.done,t},e:function(t){l=!0,a=t},f:function(){try{i||null==e.return||e.return()}finally{if(l)throw a}}}}function _unsupportedIterableToArray(t,r){if(t){if("string"==typeof t)return _arrayLikeToArray(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?_arrayLikeToArray(t,r):void 0}}function _arrayLikeToArray(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}console.log("Loading Utilities...");var ORD_NONE=Blockly.JavaScript.ORDER_NONE,ORD_ATOM=Blockly.JavaScript.ORDER_ATOMIC;function impt(t){var r,e,n=_createForOfIteratorHelper(t);try{for(n.s();!(e=n.n()).done;){var o=(r=e.value).split(".").pop();Blockly.JavaScript.definitions_["import_"+o.toLowerCase()]="var "+o+" = Java.type('"+r+"');"}}catch(t){n.e(t)}finally{n.f()}}function sig_impt(t){var r=t.split(".").pop();return Blockly.JavaScript.definitions_["import_"+r.toLowerCase()]="var "+r+" = Java.type('"+t+"');",r}function get_val_inp(t,r){return Blockly.JavaScript.valueToCode(t,r,ORD_ATOM)}function build_enum(t,r,e,n,o,a){Blockly.Blocks[t]={init:function(){this.appendDummyInput().appendField(r).appendField(new Blockly.FieldDropdown(a),"TYPE"),this.setOutput(!0,e),this.setColour(n),this.setTooltip(o)}},Blockly.JavaScript[t]=function(t){var r=sig_impt(e);return["".concat(r,".").concat(t.getFieldValue("TYPE")),Blockly.JavaScript.ORDER_NONE]}}